{"version":3,"sources":["comps/Title.js","firebase/config.js","comps/ProgressBar.js","hooks/useStorage.js","comps/UploadForm.js","comps/ImageGrid.js","hooks/useFirestore.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timeStamp","FieldValue","serverTimestamp","ProgressBar","file","setFile","useState","progress","setprogress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","useStorage","console","log","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","ImageGrid","setSelectedImage","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","useFirestore","map","key","layout","whileHover","opacity","onClick","img","src","alt","transition","delay","Modal","selectedImage","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.110b15bd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n}\n\nexport default Title;","import * as firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBF_NWMfsYcUf1_SKdHt0Ivlo3U2ixodE4\",\r\n    authDomain: \"imagegalleryv2.firebaseapp.com\",\r\n    databaseURL: \"https://imagegalleryv2.firebaseio.com\",\r\n    projectId: \"imagegalleryv2\",\r\n    storageBucket: \"imagegalleryv2.appspot.com\",\r\n    messagingSenderId: \"11687586535\",\r\n    appId: \"1:11687586535:web:b08f4511b1f0f410055042\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timeStamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport {projectStorage, projectFirestore, timeStamp};","import React, { useEffect } from 'react';\r\nimport { useStorage } from '../hooks/useStorage';\r\nimport { motion } from 'framer-motion';\r\n\r\n\r\nexport const ProgressBar = ({ file, setFile }) => {\r\n    const { url, progress } = useStorage(file);\r\n    console.log(progress, url);\r\n\r\n    // we run this and stop it when the url changes\r\n    useEffect(() => {\r\n        if (url)\r\n            setFile(null);\r\n    }, [url, setFile])\r\n\r\n    return (\r\n        <motion.div className='progress-bar'\r\n            initial={{ width: 0 }}\r\n            animate={{ width: progress + '%' }}\r\n        >\r\n        </motion.div>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { projectStorage, projectFirestore, timeStamp } from '../firebase/config';\r\n\r\nexport const useStorage = (file) => {\r\n    const [progress, setprogress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    // to get back the image url after it is uploaded\r\n    const [url, setUrl] = useState(null);\r\n\r\n    // every time we have a new file, this function will run\r\n    useEffect(() => {\r\n        // references (creating a ref for the file in the storage)\r\n        const storageRef = projectStorage.ref(file.name);\r\n\r\n        // to add/ref the collection\r\n        const collectionRef = projectFirestore.collection('images');\r\n        // listen to changes. (snapshot is for time of upload in that time)\r\n        // on() teakes 4 args: change, while uploading, error, after uploading\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setprogress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async () => {\r\n            // we get the url for the image we just uploaded\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timeStamp();\r\n            setUrl(url);\r\n            collectionRef.add({\r\n                url,\r\n                createdAt,\r\n            })\r\n        });\r\n    }, [file])\r\n\r\n    return {progress, error, url}\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ProgressBar } from '../comps/ProgressBar';\r\n\r\nexport const UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const types = ['image/png', 'image/jpeg']\r\n\r\n    const changeHandler = (e) => {\r\n        // if we have multiple files, we select the first one\r\n        let selected = e.target.files[0];\r\n\r\n        if (selected && types.includes(selected.type)) {\r\n            setFile(selected);\r\n            setError('');\r\n        }\r\n        else {\r\n            setFile(null);\r\n            setError('Please select an image file (png or jpeg)');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <label>\r\n                <input type=\"file\" onChange={changeHandler} />\r\n                <span>+</span>\r\n            </label>\r\n            <div className='output'>\r\n                {error && <div className='error'>{error}</div>}\r\n                {file && <div>{file.name}</div>}\r\n                {file && <ProgressBar file={file} setFile={setFile} />}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFirestore } from '../hooks/useFirestore';\r\nimport { motion } from 'framer-motion';\r\n\r\nexport const ImageGrid = ({ setSelectedImage }) => {\r\n    const { docs } = useFirestore('images');\r\n    console.log(docs);\r\n    return (\r\n        <div className='img-grid'>\r\n            {docs && docs.map(doc => (\r\n                <motion.div className=\"img-wrap\" key={doc.id}\r\n                    layout\r\n                    whileHover={{ opacity: 1 }}\r\n                    onClick={() => setSelectedImage(doc.url)}>\r\n                    <motion.img src={doc.url} alt=\"uploaded pic.\"\r\n                        initial={{ opacity: 0 }}\r\n                        animate={{ opacity: 1 }}\r\n                        transition={{ delay: 1 }}\r\n                    />\r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import { useState, useEffect } from 'react';\r\nimport { projectFirestore } from '../firebase/config';\r\n\r\nexport const useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // this fires every time a chnage happens in the db\r\n        // we use unsub when we no longer need the document\r\n        const unsub = projectFirestore.collection(collection)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot((snap) => {\r\n                let documents = [];\r\n                // each time we get all the data from the database\r\n                snap.forEach(doc => {\r\n                    documents.push({ ...doc.data(), id: doc.id });\r\n                })\r\n                setDocs(documents);\r\n            })\r\n            return () => unsub();\r\n    }, [collection])\r\n    return { docs };\r\n}\r\n","import React from 'react'\r\nimport { motion } from 'framer-motion';\r\n\r\nexport const Modal = ({ selectedImage, setSelectedImage }) => {\r\n    const handleClick = (e) => {\r\n        if (e.target.classList.contains('backdrop'))\r\n            setSelectedImage(null);\r\n    }\r\n    return (\r\n        <motion.div className=\"backdrop\" onClick={handleClick}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n        >\r\n            <motion.img src={selectedImage} alt=\"enlarged pic.\"\r\n                initial={{ y: '-100vh' }}\r\n                animate={{ y: 0 }}\r\n            />\r\n        </motion.div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Title from './comps/Title';\nimport { UploadForm } from './comps/UploadForm';\nimport { ImageGrid } from './comps/ImageGrid';\nimport { Modal } from './comps/Modal';\nimport { useState } from 'react';\n\nfunction App() {\n  const [selectedImage, setSelectedImage] = useState(null);\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm/>\n      <ImageGrid setSelectedImage={setSelectedImage}/>\n      {selectedImage && <Modal selectedImage={selectedImage} setSelectedImage={setSelectedImage}/>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}